{% set version = "2022.0.0" %}

{% set vmajor = version.split('.')[0]|int %}
{% set vminor = version.split('.')[1]|int %}
{% set vpatch = version.split('.')[2]|int %}
{% set vbinary = vmajor - 2009 %}

{% set vtag = "v" ~ version.replace(".rc", "-rc") %}

# Official patch version for the first release of 2021 is 1,
# but internal patch version is 0, handle it for interface version.
{% set vinterface = "%d" % (vbinary * 1000 + vminor * 10 + (vpatch if vmajor != 2021 or vminor != 1 else 0)) %}

# Libraries on Windows are expected to be installed into LIBRARY_PREFIX.
# tbb4py files should be installed into PREFIX.
# See https://docs.conda.io/projects/conda-build/en/latest/user-guide/environment-variables.html.
# On non-Windows CMAKE_ARGS already contains CMAKE_INSTALL_PREFIX.
{% if win %}
    {% set cmake_args = "%CMAKE_ARGS% -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%LIBRARY_PREFIX%" %}
    {% set cmake_tbb4py_args = "%CMAKE_ARGS% -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%PREFIX%" %}
{% else %}
    {% set cmake_args = "$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release" %}
    {% set cmake_tbb4py_args = "$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release" %}
{% endif %}

# Use specific test list agreed with TBB team to cover core functionality on high level.
# Execution of all tests is too heavy task for packaging CI.
# test_malloc_compliance is temporary excluded from the list since it causes failures that likely appear due to test implementation or env misconfiguration.
# oneTBB issue: https://github.com/oneapi-src/oneTBB/issues/700
# Agreed with oneTBB developers that it is suitable approach since the product is fully tested on oneTBB side.
{% set tests = "test_parallel_for test_tbb_header conformance_version test_flow_graph test_arena_constraints" %}
{% set ctest_regex = "^(%s)$" % (tests.replace(' ', '|')) %}

{% set tbb4py_build_dir = "build_py${PY_VER}h${PKG_HASH}" %}  # [not win]
{% set tbb4py_build_dir = "build_py%PY_VER%h%PKG_HASH%" %}    # [win]

package:
  name: tbb
  version: {{ version }}

source:
  url: https://github.com/oneapi-src/oneTBB/archive/refs/tags/{{ vtag }}.tar.gz
  sha256: e8e89c9c345415b17b30a2db3095ba9d47647611662073f7fbf54ad48b7f3c2a
  patches:
    - fix-build-gcc-13.3.patch
    - 0001-Avoid-creating-python-eggs.patch

build:
  number: 0

requirements:
  build:
    - python
    - {{ compiler('cxx') }}
    # the ninja cmake generator only works on windows, for some reason
    - ninja     # [win]
    - m2-patch  # [win]
    - patch     # [not win]
    - make      # [not win]
    - cmake
    - pkg-config

outputs:
  - name: tbb
    about:
      summary: TBB Libraries
      license_file:
        - LICENSE.txt
        - third-party-programs.txt
    build:
      script:
        - set CMAKE_GENERATOR=Ninja      # [win]
        # unset option that ninja complains about
        - set CMAKE_GENERATOR_TOOLSET=   # [win]
        - set CMAKE_GENERATOR_PLATFORM=  # [win]
        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build
        - cmake --build build --parallel
        - cmake -DCOMPONENT=runtime -P build/cmake_install.cmake
      missing_dso_whitelist:
        - "*/ld64.so.1"               # [s390x]
    requirements:
    test:
      requires:
        - python
      commands:
        {% set libname = "libtbb.so." ~ vbinary ~ "." ~ vminor %}          # [linux]
        {% set libname = "libtbb." ~ vbinary ~ "." ~ vminor ~ ".dylib" %}  # [osx]
        {% set libname = "tbb" ~ vbinary ~ ".dll" %}                       # [win]
        {% set win_extra = "os.add_dll_directory(os.environ['LIBRARY_BIN']); " if win else "" %}
        - python -c "import ctypes, os; {{ win_extra }} assert {{ vinterface }} == ctypes.cdll[r'{{ libname }}']['TBB_runtime_interface_version']()"

  - name: tbb-devel
    about:
      summary: TBB Development files
      license_file:
        - LICENSE.txt
        - third-party-programs.txt
    build:
      script:
        - set CMAKE_GENERATOR=Ninja      # [win]
        - set CMAKE_GENERATOR_TOOLSET=   # [win]
        - set CMAKE_GENERATOR_PLATFORM=  # [win]
        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build
        - cmake --build build --parallel
        - cmake -DCOMPONENT=devel -P build/cmake_install.cmake
      run_exports:
        - tbb >={{ version }}
    requirements:
      build:
        - python
        - {{ compiler('cxx') }}
        - ninja  # [win]
        - make   # [not win]
        - cmake >=3.13
        - pkg-config
      run:
        - {{ pin_subpackage('tbb', exact=True) }}        # development package is for specific version of tbb
    test:
      requires:
        - {{ compiler('cxx') }}
        - ninja  # [win]
        - make   # [not win]
        - cmake
        - pkg-config
      source_files:
        - cmake
        - test
        - CMakeLists.txt
        - include  # some tests depend on files from include
        - integration  # same
        - src      # some tests depend on files from src
      commands:
        - set CMAKE_GENERATOR=Ninja      # [win]
        - set CMAKE_GENERATOR_TOOLSET=   # [win]
        - set CMAKE_GENERATOR_PLATFORM=  # [win]
        # Setting TBB_DIR=ON and TBB_FIND_PACKAGE=ON is needed to use libraries from the tested package,
        # but do not build them from sources; real path to TBBConfig files is not required,
        # because CMake will successfully find installed tested package.
        - cmake {{ cmake_args }} -DTBB_TEST=ON -DTBB_DIR=ON -DTBB_FIND_PACKAGE=ON -S . -B test_build
        - cmake --build test_build --target {{ tests }} --parallel  # build tests
        - cd test_build
        - ctest -R "{{ ctest_regex }}" --output-on-failure

  - name: tbb4py
    about:
      summary: TBB module for Python
      license: Apache-2.0
      license_file:
        - LICENSE.txt
        - third-party-programs.txt
      dev_url: https://github.com/oneapi-src/oneTBB/tree/master/python
    build:
      script:
        - set CMAKE_GENERATOR=Ninja      # [win]
        - set CMAKE_GENERATOR_TOOLSET=   # [win]
        - set CMAKE_GENERATOR_PLATFORM=  # [win]
        - export PYTHONPATH="${SP_DIR/${PREFIX}/build}"  # [osx]
        - cmake {{ cmake_tbb4py_args }} -DTBB4PY_BUILD=ON -DTBB_TEST=OFF -S . -B {{ tbb4py_build_dir }}
        - cmake --build {{ tbb4py_build_dir }} --target python_build --parallel
        - cmake -DCOMPONENT=tbb4py -P {{ tbb4py_build_dir }}/cmake_install.cmake
      missing_dso_whitelist:
        - "*/ld64.so.1"          # [s390x]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - make   # [not win]
        - cmake
        - swig
      host:
        - python
        - pip
        - setuptools
        - {{ pin_subpackage('tbb-devel', exact=True) }}
      run:
        - tbb >={{ version }}                            # while python module works with any compatible tbb...
        - python
    test:
      requires:
        - python
        - {{ pin_subpackage('tbb', exact=True) }}        # we want to test with this specific tbb package
      imports:
        - tbb
        - TBB
      commands:
        - python -m TBB -h
        - python -m tbb -h
        - python -m tbb test

about:
  home: https://github.com/oneapi-src/oneTBB
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE.txt
    - third-party-programs.txt
  summary: High level abstract threading library
  description: |
    oneTBB is a flexible C++ library that simplifies the work of adding parallelism to complex applications, even if you
    are not a threading expert.
  dev_url: https://github.com/oneapi-src/oneTBB
  doc_url: https://software.intel.com/en-us/oneapi-tbb-documentation

extra:
  skip-lints:
    - wrong_output_script_key
    - outputs_not_unique
    - missing_section
  recipe-maintainers:
    - anton-malakhov
    - jschueller
    - AlexVeprev
    - isaevil
    - ilya-lavrenov
